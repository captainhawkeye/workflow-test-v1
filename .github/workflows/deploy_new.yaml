name: deploy

on:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  user-validation:
    name: Validate GitHub Actor
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
    steps:
      - id: check
        run: |
          ACTOR="${{ github.actor }}"
          ALLOWED='${{ vars.ALLOWED_ACTORS }}'

          if echo "$ALLOWED" | jq -e ". | index(\"$ACTOR\")" > /dev/null; then
            echo "✅ Authorized user: $ACTOR"
            echo "authorized=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Unauthorized user: $ACTOR"
            echo "authorized=false" >> "$GITHUB_OUTPUT"
          fi

  deploy:
    needs: user-validation
    if: needs.user-validation.outputs.authorized == 'true'
    runs-on:
      - ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Download artifact from previous run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUN_ID: 15944548968
        ARTIFACT_NAME: image-version
      run: |
        echo "Fetching artifact list from run ID $RUN_ID"
        ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts)

        ARTIFACT_ID=$(echo "$ARTIFACTS" | jq ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .id")

        if [ -z "$ARTIFACT_ID" ]; then
          echo "❌ Artifact '$ARTIFACT_NAME' not found in run $RUN_ID"
          exit 1
        fi

        echo "✅ Found artifact ID: $ARTIFACT_ID. Downloading..."

        curl -L \
          -H "Authorization: token $GITHUB_TOKEN" \
          -o artifact.zip \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip

        unzip artifact.zip


    - name: Read image version
      id: read_version
      run: |
        VERSION=$(cat image_version.txt)
        echo "IMAGE_VERSION=$VERSION"
        echo "VERSION=$IMAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Deploy using image
      run: |
        echo "Deploying image with version ${{ steps.read_version.outputs.VERSION }}"
